Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _https=_interopRequireDefault(require("https")),_http=_interopRequireDefault(require("http")),_net=_interopRequireDefault(require("net")),_nodeFetch=_interopRequireDefault(require("node-fetch")),_advising=require("advising.js");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}class MultiFetch{constructor(e,r){this.index=-1,this.dealParams(e,r),this.bases=e,void 0!==r&&(this.interval=r)}dealParams(e,r){if(!Array.isArray(e))throw new Error("[Error] The bases parameter bases should be a array type.");if(void 0!==r){if(!Number.isInteger(r))throw new Error("[Error] The interval parameter should be of integer type.");if(r<=0)throw new Error("[Error] The interval should be a positive integer otherwise it has no meaning.")}}async fetch(e,r,t=0){if("string"!=typeof e)throw new Error("[Error] The path parameter path should be of string type.");if("object"!=typeof r)throw new Error("[Error] The options parameter should be a object type.");var i=this.bases,a=(this.index<i.length-1?this.index+=1:this.index=0,this).index,i=i[a],a=(i.startsWith("https")&&(a=new _https.default.Agent({rejectUnauthorized:!1}),r.agent=a),i+e);return(0,_nodeFetch.default)(a,r)}}var _default=exports.default=MultiFetch;