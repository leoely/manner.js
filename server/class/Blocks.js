Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _net=_interopRequireDefault(require("net")),_advising=require("advising.js");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function getIntervalFromTime(e){var r=(new Date).getTime();return Math.floor(r-e)}class Blocks{constructor(e){this.dealParams(e),this.interval=e,this.count=0,this.ipv4Blocks=new _advising.Ipv4Router({debug:!1,hideError:!0}),this.ipv6Blocks=new _advising.Ipv6Router({debug:!1,hideError:!0})}dealParams(e){if(!Number.isInteger(e))throw new Error("[Error] The interval parameter should be of integer type.");if(e<=0)throw new Error("[Error] The interval should be a positive integer otherwise it has no meaning.");if(!Number.isInteger(e/500))throw new Error("[Error] The parameter interval should be divisible by 500 milliseconds.")}getCount(){return this.count}setInterval(e){if(!Number.isInteger(e))throw new Error("[Error] The interval parameter should be of integer type.");if(e<=0)throw new Error("[Error] The interval should be a positive integer otherwise it has no meaning.");this.interval=e}cleanIpAddress(e,r){let t;if(_net.default.isIPv4(e))t=this.ipv4Blocks;else{if(!_net.default.isIPv6(e))throw new Error("[Error] The Ip type is not expected");t=this.ipv6Blocks}var i=t.gain(e);void 0!==i&&(i=i.time,r<=getIntervalFromTime(i))&&(t.ruin(e),this.count=0)}examineIpAddress(e,r){let t=!0;var i,n=r.gain(e);return void 0===n?(i=(new Date).getTime(),i=(r.attach(e,{time:i,count:1}),this.count=1,this).interval,setTimeout(()=>this.cleanIpAddress(e,this.interval),i)):(i=n.time,getIntervalFromTime(i)<this.interval?(n=n.count,r.revise(e,{time:i,count:n+=1}),this.count=n,t=!1):(r.ruin(e),this.count=0)),t}examine(e){if(void 0!==e){var r,{}=this;if(_net.default.isIPv4(e))return r=this.ipv4Blocks,this.examineIpAddress(e,r);if(_net.default.isIPv6(e))return r=this.ipv6Blocks,this.examineIpAddress(e,r);throw new Error("[Error] The Ip type is not expected.")}}}var _default=exports.default=Blocks;